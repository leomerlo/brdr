{"version":3,"sources":["app.js","controllers.js","services.js","controllers/AmigosCtrl.js","controllers/ChatCtrl.js","controllers/ComentarioCtrl.js","controllers/EdicionCtrl.js","controllers/FavCtrl.js","controllers/FeedAmigosCtrl.js","controllers/FeedCtrl.js","controllers/LoginCtrl.js","controllers/MensajesCtrl.js","controllers/NewCtrl.js","controllers/ProfileCtrl.js","controllers/RegistroCtrl.js","controllers/UserCtrl.js","directives/fileInput.js","services/Auth.js","services/ComentarioService.js","services/MensajesService.js","services/PerfilService.js","services/PostsService.js","services/Response.js","services/Storage.js"],"names":[],"mappingsrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACztMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACthMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../js/bundle.js","sourcesContent":["angular.module('brdr', ['ionic', 'brdr.directives', 'brdr.controllers', 'brdr.services'])\n\n.run(function($ionicPlatform, $ionicPopup, $rootScope, $state, Auth) {\n  $ionicPlatform.ready(function() {\n    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n    // for form inputs)\n    if (window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {\n      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      cordova.plugins.Keyboard.disableScroll(true);\n\n    }\n    if (window.StatusBar) {\n      // org.apache.cordova.statusbar required\n      StatusBar.styleDefault();\n    }\n\n    $rootScope.$on('$stateChangeStart', function(ev, nuevoState, nuevoStateParams, actualState) {\n      if(nuevoState.data !== undefined && nuevoState.data.requireAuth === true) {\n        if(!Auth.isLogged()) {\n          ev.preventDefault();\n          $state.go('login');\n        }\n      }\n    });\n  });\n})\n\n.config(function($stateProvider, $urlRouterProvider) {\n\n  $stateProvider\n\n  .state('login', {\n    url: '/login',\n    templateUrl: 'templates/login.html',\n    controller: 'LoginCtrl'\n  })\n\n  .state('registro', {\n    url: '/registro',\n    templateUrl: 'templates/registro.html',\n    controller: 'RegistroCtrl'\n  })\n\n  .state('tab', {\n    url: '/tab',\n    abstract: true,\n    templateUrl: 'templates/tabs.html'\n  })\n\n  .state('tab.feed', {\n    url: '/feed',\n    views: {\n      'tab-feed': {\n        templateUrl: 'templates/tab-feed.html',\n        controller: 'FeedCtrl'\n      }\n    }\n  })\n\n    .state('tab.comentarios', {\n      url: '/feed/:id',\n      views: {\n        'tab-feed': {\n          templateUrl: 'templates/comentarios.html',\n          controller: 'ComentarioCtrl'\n        }\n      }\n    })\n\n    .state('tab.editar', {\n      url: '/detalle/:id',\n      views: {\n        'tab-feed': {\n          templateUrl: 'templates/tab-editar.html',\n          controller: 'EdicionCtrl'\n        }\n      }\n    })\n\n  .state('tab.new', {\n    url: '/new',\n    data: {\n      requireAuth: true\n    },\n    views: {\n      'tab-new': {\n        templateUrl: 'templates/tab-new.html',\n        controller: 'NewCtrl'\n      }\n    }\n  })\n\n  .state('tab.profile', {\n    url: '/profile',\n    data: {\n      requireAuth: true\n    },\n    views: {\n      'tab-profile': {\n        templateUrl: 'templates/tab-profile.html',\n        controller: 'ProfileCtrl'\n      }\n    }\n  })\n\n  .state('tab.feedamigos', {\n    url: '/feedamigos',\n    data: {\n      requireAuth: true\n    },\n    views: {\n      'tab-feed': {\n        templateUrl: 'templates/tab-feed.html',\n        controller: 'FeedAmigosCtrl'\n      }\n    }\n  })\n\n  .state('tab.user', {\n    url: '/user/:id',\n    data: {\n      requireAuth: true\n    },\n    views: {\n      'tab-feed': {\n        templateUrl: 'templates/tab-profile.html',\n        controller: 'UserCtrl'\n      }\n    }\n  })\n\n  .state('tab.fav', {\n    url: '/fav',\n    data: {\n      requireAuth: true\n    },\n    views: {\n      'tab-fav': {\n        templateUrl: 'templates/tab-fav.html',\n        controller: 'FavCtrl'\n      }\n    }\n  })\n\n  .state('tab.mensajes', {\n    url: '/mensajes',\n    data: {\n      requireAuth: true\n    },\n    views: {\n      'tab-mensajes': {\n        templateUrl: 'templates/tab-mensajes.html',\n        controller: 'MensajesCtrl'\n      }\n    }\n  })\n\n    .state('tab.amigos', {\n      url: '/amigos',\n      data: {\n        requireAuth: true\n      },\n      views: {\n        'tab-mensajes': {\n          templateUrl: 'templates/tab-amigos.html',\n          controller: 'AmigosCtrl'\n        }\n      }\n    })\n\n    .state('tab.chat', {\n      url: '/mensajes/:id',\n      data: {\n        requireAuth: true\n      },\n      views: {\n        'tab-mensajes': {\n          templateUrl: 'templates/tab-chat.html',\n          controller: 'ChatCtrl'\n        }\n      }\n    });\n\n  // if none of the above states are matched, use this as the fallback\n  $urlRouterProvider.otherwise('/tab/feed');\n\n}).constant('API_SERVER', '/_brdr/brdr/BRDR/public/api')\n.constant('IMAGE_FOLDER', '/_brdr/brdr/BRDR/public/images/');\nangular.module('brdr.directives', []);","angular.module('brdr.controllers', [])","angular.module('brdr.services', []);","angular.module('brdr.controllers').controller('AmigosCtrl',\n    [\n        '$scope',\n        '$state',\n        'Auth',\n        'Storage',\n        'Response',\n        'API_SERVER',\n        'IMAGE_FOLDER',\n        'PerfilService',\n        function($scope, $state, Auth, Storage, Response, API_SERVER, IMAGE_FOLDER,PerfilService) {\n\n            $scope.$on('$ionicView.beforeEnter', function() {\n\n                $scope.nuance = new Date().getTime();\n                $scope.imgFolder = IMAGE_FOLDER + 'users';\n\n                PerfilService.amigos().then(function(rta) {\n                    if(rta.success){\n                        $scope.amigos = rta.data.message;\n                    } else {\n                        Response.error(rta);\n                    }\n                });\n\n            });\n\n        }\n    ]    \n);","angular.module('brdr.controllers').controller('ChatCtrl',\n    [\n        '$scope',\n        '$state',\n        '$stateParams',\n        'Auth',\n        'Storage',\n        'Response',\n        'API_SERVER',\n        'IMAGE_FOLDER',\n        'MensajesService',\n        function($scope, $state, $stateParams, Auth, Storage, Response, API_SERVER, IMAGE_FOLDER,MensajesService) {\n\n            $scope.$on('$ionicView.beforeEnter', function() {\n\n                $scope.imgFolder = IMAGE_FOLDER + 'users';\n                $scope.user = Storage.get('userData');\n                $scope.titulo = '';\n\n                $scope.getMensajes();\n\n            });\n\n            $scope.$on('$ionicView.beforeLeave', function() {\n                clearInterval(loop);\n            });\n\n            var loop = setInterval(function(){\n                $scope.getMensajes();                \n            },5000);\n\n            $scope.getMensajes = function(){\n                MensajesService.getHilo($stateParams.id).then(function(rta) {\n                    if(rta.success){\n                        $scope.mensajes = rta.data.message;\n                        for(i in $scope.mensajes){\n                            if($scope.mensajes[i]['emisor']['id'] == $scope.user.id){\n                                $scope.mensajes[i]['arrowClass'] = 'arrow-right';\n                                $scope.titulo = $scope.mensajes[i]['receptor']['usuario'];\n                            } else {\n                                $scope.mensajes[i]['arrowClass'] = 'arrow-left';\n                                $scope.titulo = $scope.mensajes[i]['emisor']['usuario'];\n                            }\n                        }\n                    } else {\n                        Response.error(rta);\n                    }\n                });\n            }\n\n            $scope.enviarMensaje = function(mensaje){\n\n                var data = {\n                    'mensaje': mensaje\n                }\n\n                MensajesService.enviar($stateParams.id,data).then(function(rta){\n                    if(rta.success){\n                        $scope.nuevoMensaje = '';\n                        $scope.getMensajes();\n                    } else {\n                        Response.error(rta);\n                    }\n                });\n\n            }\n\n        }\n    ]    \n);","angular.module('brdr.controllers').controller('ComentarioCtrl',\n\t[\n        '$scope',\n        '$stateParams',\n        '$state',\n        'Storage',\n        'Response',\n        'API_SERVER',\n        'IMAGE_FOLDER',\n        'PostsService',\n        'ComentarioService',\n        function($scope, $stateParams, $state, Storage, Response, API_SERVER, IMAGE_FOLDER, PostsService, ComentarioService) {\n\n            $scope.$on('$ionicView.beforeEnter', function() {\n\n                $scope.comentario = {\n                    texto: \"\"\n                };\n                $scope.imgFolder = IMAGE_FOLDER + 'users/';\n                $scope.user = Storage.get('userData');\n                $scope.user.imagen = $scope.imgFolder + $scope.user.id;\n                $scope.nuance = new Date().getTime();\n\n                PostsService.one($stateParams.id).then(function(rta) {\n                    if(rta.data.status != -1){\n                        $scope.post = rta.data.message;\n                    }\n                });\n            });\n        \n            $scope.nuevoComentario = function() {\n\n                //$scope.comentario = $scope.post.id;\n\n                console.log($scope.comentario);\n\n                $('span.error').remove();\n                $('*.error').removeClass('error');\n\n                ComentarioService.nuevoComentario($scope.post.id,$scope.comentario).then(function(rta) {\n                    if (rta.success) {\n                        $scope.comentario = {\n                            texto: \"\"\n                        };\n                        $state.go('tab.feed');\n                    } else {\n                        Response.error(rta);\n                    }\n                });                    \n            }\n\n            $scope.eliminarComentario = function(id) {\n\n                ComentarioService.eliminarComentario(id).then(function(rta) {\n                    if (rta.success) {\n                        $state.go('tab.feed');\n                    } else {\n                        Response.error(rta);\n                    }\n                });                    \n            }\n\n        }\n    ]    \n);","angular.module('brdr.controllers').controller('EdicionCtrl',\n\t[\n        '$scope',\n        '$stateParams',\n        '$state',\n        'Storage',\n        'Response',\n        'API_SERVER',\n        'PostsService',\n        'ComentarioService',\n        function($scope, $stateParams, $state, Storage, Response, API_SERVER, PostsService, ComentarioService) {\n\n            $scope.$on('$ionicView.beforeEnter', function() {\n                PostsService.one($stateParams.id).then(function(rta) {\n                    if(rta.success){\n                        $scope.post = rta.data.message;\n                    } else {\n                        Response.error(rta);\n                    }\n                });\n            });\n        \n            $scope.editarPost = function(post) {\n\n                $('span.error').remove();\n                $('*.error').removeClass('error');\n\n                PostsService.editarPost($stateParams.id,post).then(function(rta) {\n                    if (rta.success) {\n                        $scope.post = [];\n                        $state.go('tab.feed');    \n                    } else {\n                        Response.error(rta);\n                    }\n                });                  \n            }\n\n            $scope.eliminarPost = function(post) {\n\n                $('span.error').remove();\n                $('*.error').removeClass('error');\n\n                PostsService.eliminarPost($stateParams.id,post).then(function(rta) {\n                    if (rta.success) {\n                        $state.go('tab.feed');    \n                    } else {\n                        Response.error(rta);\n                    }\n                });                  \n            }\n\n        }\n    ]    \n);","angular.module('brdr.controllers').controller('FavCtrl',\n    [\n        '$scope',\n        '$state',\n        'Auth',\n        'Storage',\n        'Response',\n        'API_SERVER',\n        'IMAGE_FOLDER',\n        function($scope, $state, Auth, Storage, Response, API_SERVER, IMAGE_FOLDER) {\n        }\n    ]    \n);","angular.module('brdr.controllers').controller('FeedAmigosCtrl',\n\t[\n        '$scope',\n        '$state',\n        'Storage',\n        'Response',\n        'API_SERVER',\n        'IMAGE_FOLDER',\n        'PostsService',\n        function($scope, $state, Storage, Response, API_SERVER, IMAGE_FOLDER, PostsService) {\n        \t\n            $scope.$on('$ionicView.beforeEnter', function() {\n\n                $scope.imgFolder = IMAGE_FOLDER;\n\n                PostsService.amigos().then(function(rta) {\n                    if(rta.success){\n                        $scope.posts = rta.data.message;\n                    } else {\n                        Response.error(rta);\n                    }\n\n                });\n                $scope.user = Storage.get('userData');\n            });\n        }\n    ]    \n);","angular.module('brdr.controllers').controller('FeedCtrl',\n\t[\n        '$scope',\n        '$state',\n        'Storage',\n        'Response',\n        'API_SERVER',\n        'IMAGE_FOLDER',\n        'PostsService',\n        function($scope, $state, Storage, Response, API_SERVER, IMAGE_FOLDER, PostsService) {\n        \t\n            $scope.$on('$ionicView.beforeEnter', function() {\n\n                $scope.nuance = new Date().getTime();\n                $scope.imgFolder = IMAGE_FOLDER;\n\n                PostsService.all().then(function(rta) {\n                    if(rta.success){\n                        $scope.posts = rta.data.message;\n                    } else {\n                        Response.error(rta);\n                    }\n\n                });\n                $scope.user = Storage.get('userData');\n            });\n        }\n    ]    \n);","angular.module('brdr.controllers').controller(\n    'LoginCtrl',\n    [\n        '$scope',\n        '$ionicPopup',\n        'Response',\n        '$state',\n        'Auth',\n        function($scope, $ionicPopup, Response, $state, Auth) {\n\n            /**\n             * Login \n             *\n             * @params {user}\n             * @returns {array}\n             */\n            $scope.login = function(user) {\n\n                $('span.error').remove();\n                $('*.error').removeClass('error');\n\n                Auth.login(user).then(function(rta) {\n                    if (rta.success) {\n                        $state.go('tab.feed');    \n                    } else {\n                        Response.error(rta);\n                    }\n                });\n            }\n        }\n    ]\n);","angular.module('brdr.controllers').controller('MensajesCtrl',\n    [\n        '$scope',\n        '$state',\n        'Auth',\n        'Storage',\n        'Response',\n        'API_SERVER',\n        'IMAGE_FOLDER',\n        'MensajesService',\n        function($scope, $state, Auth, Storage, Response, API_SERVER, IMAGE_FOLDER,MensajesService) {\n\n            $scope.$on('$ionicView.beforeEnter', function() {\n\n                $scope.nuance = new Date().getTime();\n                $scope.imgFolder = IMAGE_FOLDER + 'users';\n                $scope.user = Storage.get('userData');\n\n                MensajesService.conversaciones().then(function(rta) {\n                    if(rta.success){\n                        $scope.conversaciones = rta.data.message;\n                        for(i in $scope.conversaciones){\n\n                            if($scope.conversaciones[i]['emisor']['id'] == $scope.user.id){\n                                $scope.conversaciones[i]['conv_id'] = $scope.conversaciones[i]['receptor']['id'];\n                                $scope.conversaciones[i]['nombre'] = $scope.conversaciones[i]['receptor']['usuario'];\n                            } else {\n                                $scope.conversaciones[i]['conv_id'] = $scope.conversaciones[i]['emisor']['id'];\n                                $scope.conversaciones[i]['nombre'] = $scope.conversaciones[i]['emisor']['usuario'];\n                            }\n                        }\n                    } else {\n                        Response.error(rta);\n                    }\n                });\n\n            });\n\n        }\n    ]    \n);","angular.module('brdr.controllers').controller('NewCtrl',\n\t[\n        '$scope',\n        '$state',\n        'Response',\n        'PostsService',\n        function($scope, $state, Response, PostsService) {\n\n        \t$scope.$on('$ionicView.beforeEnter', function() {\n                $scope.post = {\n\t\t\t\t\ttexto: null,\n\t\t\t\t\timagen: 'images/imageLoader.jpg',\n\t\t\t\t};\n            });\n\n\n\t\t\t/**\n\t\t\t * Creacion de nuevo post\n\t\t\t *\n\t\t\t * @params {post}\n\t\t\t * @returns {array}\n\t\t\t */\n\t\t\t$scope.nuevoPost = function(post) {\n\n                $('span.error').remove();\n\t\t\t\t$('*.error').removeClass('error');\n\n\t\t\t    PostsService.nuevoPost(post).then(function(rta) {\n\t\t\t    \tif (rta.success) {\n\t\t\t    \t\t$scope.post = [];\n\t\t\t    \t    $state.go('tab.feed');    \n\t\t\t    \t} else {\n\t\t\t    \t    Response.error(rta);\n\t\t\t    \t}\n\t\t\t    });                    \n\t\t\t}\n\n        }\n    ]    \n);","angular.module('brdr.controllers').controller('ProfileCtrl',\n    [\n        '$scope',\n        '$state',\n        '$stateParams',\n        'Auth',\n        'PerfilService',\n        'Storage',\n        'Response',\n        'API_SERVER',\n        'IMAGE_FOLDER',\n        function($scope, $state, $stateParams, Auth, PerfilService, Storage, Response, API_SERVER, IMAGE_FOLDER) {\n\n            $scope.user = [];\n\n            $scope.$on('$ionicView.beforeEnter', function() {\n              $scope.title = \"Mi cuenta\";\n              $scope.disable = false;\n              $scope.user = Storage.get('userData');\n              $scope.user.imagen = IMAGE_FOLDER + '/users/' + $scope.user.id + '.jpg?req=' + new Date().getTime();;\n            });\n\n            $scope.update = function(user){\n\n                $('span.error').remove();\n                $('*.error').removeClass('error');\n\n                if(!$scope.user.imagen.includes(\"image/\")){\n                  // Si la imagen no es base64, no fue actualizada\n                  $scope.user.imagen = '';\n                }\n\n                Auth.update(user).then(function(rta) {\n                  if (rta.success) {\n                      $state.go('tab.feed',{},{ reload: true, inherit: false, notify: true });\n                  } else {\n                      Response.error(rta);\n                  }\n                });\n            }\n            \n            /**\n             * Logout\n             *\n             * @params {user}\n             * @returns {array}\n             */\n            $scope.logout = function(user) {\n                Auth.logout(user);\n                $state.go('login');\n            }\n        }\n    ]    \n);","angular.module('brdr.controllers').controller(\n    'RegistroCtrl',\n    [\n        '$scope',\n        '$ionicPopup',\n        '$state',\n        'Auth',\n        'Response',\n        function($scope, $ionicPopup, $state, Auth, Response) {\n\n            /**\n             * Registro de usuarios\n             *\n             * @param {user} \n             * @returns {array}\n             */\n            $scope.registro = function(user) {\n\n                $('span.error').remove();\n                $('*.error').removeClass('error');\n\n                Auth.registro(user).then(function(rta) {\n                  if (rta.success) {\n                      $state.go('login');    \n                  } else {\n                    Response.error(rta);\n                  }\n                });\n            }\n        }\n    ]\n);","angular.module('brdr.controllers').controller('UserCtrl',\n    [\n        '$scope',\n        '$state',\n        '$stateParams',\n        'PerfilService',\n        'Response',\n        'API_SERVER',\n        'IMAGE_FOLDER',\n        '$ionicPopup',\n        function($scope, $state, $stateParams, PerfilService, Response, API_SERVER, IMAGE_FOLDER, $ionicPopup) {\n\n            $scope.user = [];\n\n            $scope.$on('$ionicView.beforeEnter', function() {\n              $scope.disable = true;\n\n              PerfilService.getUserInfo($stateParams.id).then(function(rta) {\n                if(rta.success){\n                    $scope.user = rta.data.message;\n                    $scope.user.imagen = IMAGE_FOLDER + 'users/' + $scope.user.id + '.jpg';\n                    $scope.title = $scope.user.usuario;\n                } else {\n                    Response.error(rta);\n                }\n              });\n\n            });\n\n            $scope.agregarAmigo = function(){\n              PerfilService.agregarAmigo($stateParams.id).then(function(rta) {\n                if (rta.success) {\n                    $state.go('tab.amigos');\n                } else {\n                    Response.error(rta);\n                }\n              });\n            }\n\n            $scope.eliminarAmigo = function(){\n              PerfilService.eliminarAmigo($stateParams.id).then(function(rta) {\n                if (rta.success) {\n                    $state.go('tab.feed');\n                } else {\n                    Response.error(rta);\n                }\n              });\n            }\n        }\n    ]    \n);","angular.module('brdr.directives')\n.directive('fileInput', function($q) {\n    let slice = Array.prototype.slice;\n\n    return {\n        restrict: 'A',\n        require: '?ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            if (!ngModel) return;\n\n            ngModel.$render = function() {};\n\n            element.bind('change', function(e) {\n                var element = e.target;\n\n                $q.all(slice.call(element.files, 0).map(readFile))\n                    .then(function(values) {\n                        if (element.multiple) ngModel.$setViewValue(values);\n                        else ngModel.$setViewValue(values.length ? values[0] : null);\n                        ngModel.$render();\n                    });\n\n                function readFile(file) {\n                    var deferred = $q.defer();\n\n                    var reader = new FileReader();\n                    reader.onload = function(e) {\n                        deferred.resolve(e.target.result);\n                    };\n                    reader.onerror = function(e) {\n                        deferred.reject(e);\n                    };\n                    reader.readAsDataURL(file);\n\n                    return deferred.promise;\n                }\n\n            });\n\n        }\n    };\n});","angular.module('brdr.services')\n.factory('Auth', [\n\t'$http',\n\t'API_SERVER',\n\t'Storage',\n\tfunction($http, API_SERVER, Storage) {\n\t\tlet token = null;\n\t\tlet userData = {\n\t\t\tid: null,\n\t\t\tnombre: null,\n\t\t\temail: null\n\t\t};\n\n\t\ttryLogFromStorage();\n\n\t\t/**\n\t\t * Registra un usuario.\n\t\t *\n\t\t * @return {{}}\n\t\t */\n\t\tlet registro = function(user) {\n\t\t\treturn $http.post(API_SERVER + \"/registro\", user).then(\n\t\t\t\tfunction(rta) {\n\t\t\t\t\tlet response = rta.data;\n\t\t\t\t\tif(response.status == 0) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsuccess: true\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\tstatus: response.status,\n\t\t\t\t\t\t\terror: response.message\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\n\t\t/**\n\t\t * Actualiza los datos del usuario.\n\t\t *\n\t\t * @return {{}}\n\t\t */\n\t\tlet update = function(user) {\n\t\t\treturn $http.put(API_SERVER + \"/perfil\", user, {\n\t\t\t\theaders: { \n                    'x-token': getToken()\n                }\n            }).then(\n\t\t\t\tfunction(rta) {\n\t\t\t\t\tlet response = rta.data;\n\t\t\t\t\tif(response.status == 0) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsuccess: true\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\tstatus: response.status,\n\t\t\t\t\t\t\terror: response.message\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\n\t\t/**\n\t\t * Intenta loguear al usuario.\n\t\t *\n\t\t * @param {{}} user\n\t\t * @return {Promise}\n\t\t */\n\t\tlet login = function(user) {\n\t\t\treturn $http.post(API_SERVER + \"/login\", user).then(\n\t\t\t\tfunction(rta) {\n\t\t\t\t\tlet response = rta.data;\n\t\t\t\t\tif(response.status == 0) {\n\t\t\t\t\t\ttoken = response.message.token;\n\t\t\t\t\t\tuserData = {\n\t\t\t\t\t\t\tid: response.message.user.id,\n\t\t\t\t\t\t\tnombre: response.message.user.nombre,\n\t\t\t\t\t\t\tapellido: response.message.user.apellido,\n\t\t\t\t\t\t\temail: response.message.user.email,\n\t\t\t\t\t\t\tusuario: response.message.user.usuario\n\t\t\t\t\t\t};\n\t\t\t\t\t\tStorage.set('token', token);\n\t\t\t\t\t\tStorage.set('userData', userData);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsuccess: true\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\tstatus: response.status,\n\t\t\t\t\t\t\terror: response.message\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\n\t\t/**\n\t\t * Cierra la sesión.\n\t\t */\n\t\tlet logout = function() {\n\t\t\tStorage.remove('token');\n\t\t\tStorage.remove('userData');\n\t\t\ttoken = null;\n\t\t\tuserData = {\n\t\t\t\tid: null,\n\t\t\t\tnombre: null,\n\t\t\t\temail: null\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t\t * Informa si el usuario esté logueado.\n\t\t *\n\t\t * @return {boolean}\n\t\t */\n\t\tlet isLogged = function() {\n\t\t\treturn token !== null;\n\t\t};\n\n\t\t/**\n\t\t * Retorna el token de autenticación.\n\t\t *\n\t\t * @return string|null\n\t\t */\n\t\tlet getToken = function() {\n\t\t\treturn token;\n\t\t};\n\n\t\t/**\n\t\t * Retorna la info del usuario autenticado.\n\t\t *\n\t\t * @return {{}}\n\t\t */\n\t\tlet getUserData = function() {\n\t\t\treturn {\n\t\t\t\tid: userData.id,\n\t\t\t\tnombre: userData.nombre,\n\t\t\t\temail: userData.email\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t\t * Trata de loguear al usuario con datos de\n\t\t * localStorage.\n\t\t */\n\t\tfunction tryLogFromStorage() {\n\t\t\tif(Storage.has('token')) {\n\t\t\t\ttoken = Storage.get('token');\n\t\t\t\tuserData = Storage.get('userData');\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Trae info del usuario pedido\n\t\t *\n\t\t * @param {{}} user\n\t\t * @return {Promise}\n\t\t */\n\t\tlet getUserInfo = function(id) {\n\t\t\treturn $http.get(API_SERVER + \"/perfil/\" + id, {\n                    headers: { \n                        'x-token': Auth.getToken()\n                    }\n                }).then(\n\t\t\t\tfunction(rta) {\n\t\t\t\t\tlet response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\n\t\treturn {\n\t\t\tregistro \t: registro,\n\t\t\tupdate \t\t: update,\n\t\t\tlogin\t\t: login,\n\t\t\tlogout\t\t: logout,\n\t\t\tisLogged\t: isLogged,\n\t\t\tgetToken\t: getToken,\n\t\t\tgetUserData\t: getUserData\n\t\t};\n\t}\n]);","angular.module('brdr.services')\n\n.service('ComentarioService', [\n    '$http',\n    'API_SERVER',\n    'Auth',\n    function($http, API_SERVER, Auth) {\n\n        /**\n         * Crear un nuevo comentario.\n         *\n         */\n        this.nuevoComentario = function(id,comentario) {\n            return $http.post(API_SERVER + \"/comentario/\" + id, comentario, {\n                headers: { \n                    'x-token': Auth.getToken()\n                }\n            }).then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n\n        /**\n         * Crear un nuevo comentario.\n         *\n         */\n        this.eliminarComentario = function(id) {\n            return $http.delete(API_SERVER + \"/comentario/\" + id, {\n                headers: { \n                    'x-token': Auth.getToken()\n                }\n            }).then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n    }\n]);","angular.module('brdr.services')\n\n.service('MensajesService', [\n    '$http',\n    'API_SERVER',\n    'Auth',\n    function($http, API_SERVER, Auth) {\n\n        /**\n         * Retorna todas las conversaciones\n         *\n         */\n        this.conversaciones = function() {\n            return $http.get(API_SERVER + \"/mensajes\", {\n                    headers: { \n                        'x-token': Auth.getToken()\n                    }\n                }).then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        }  \n\n        /**\n         * Retorna una conversacion\n         *\n         */\n        this.getHilo = function(id) {\n            return $http.get(API_SERVER + \"/mensajes/\" + id, {\n                    headers: { \n                        'x-token': Auth.getToken()\n                    }\n                }).then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        }              \n\n        /**\n         * Enviar un mensaje\n         *\n         */\n        this.enviar = function(id,post) {\n            return $http.post(API_SERVER + \"/mensajes/\" + id, post, {\n                headers: { \n                    'x-token': Auth.getToken()\n                }\n            }).then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n    }\n]);","angular.module('brdr.services')\n\n.service('PerfilService', [\n    '$http',\n    'API_SERVER',\n    'Auth',\n    function($http, API_SERVER, Auth) {\n\n        /**\n         * Devuelve la info de un usuario\n         *\n         */\n        this.getUserInfo = function(id) {\n            return $http.get(API_SERVER + \"/perfil/\" + id, {\n                    headers: { \n                        'x-token': Auth.getToken()\n                    }\n                }).then(\n                function(rta){\n                    let response = rta.data;\n\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n\n        /**\n         * Agrega un usuario a la lista de amigos\n         *\n         */\n        this.amigos = function(id) {\n\n            var data = [];\n\n            return $http.get(API_SERVER + \"/amigos\", {\n                    headers: { \n                        'x-token': Auth.getToken()\n                    }\n                }).then(\n                function(rta){\n                    let response = rta.data;\n\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n\n        /**\n         * Agrega un usuario a la lista de amigos\n         *\n         */\n        this.agregarAmigo = function(id) {\n\n            var data = [];\n\n            return $http.post(API_SERVER + \"/amigos/\" + id, data, {\n                    headers: { \n                        'x-token': Auth.getToken()\n                    }\n                }).then(\n                function(rta){\n                    let response = rta.data;\n\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n\n        /**\n         * Elimina un usuario de la lista de amigos\n         *\n         */\n        this.eliminarAmigo = function(id) {\n\n            var data = [];\n\n            return $http.delete(API_SERVER + \"/amigos/\" + id, {\n                    headers: { \n                        'x-token': Auth.getToken()\n                    }\n                }).then(\n                function(rta){\n                    let response = rta.data;\n\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n\n    }\n]);","angular.module('brdr.services')\n\n.service('PostsService', [\n    '$http',\n    'API_SERVER',\n    'Auth',\n    function($http, API_SERVER, Auth) {\n\n        /**\n         * Retorna todos los posts\n         *\n         */\n        this.all = function() {\n            return $http.get(API_SERVER + \"/\").then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        }\n\n        /**\n         * Retorna lost posts de mis amigos\n         *\n         */\n        this.amigos = function() {\n            return $http.get(API_SERVER + \"/amigos/feed\", {\n                headers: { \n                    'x-token': Auth.getToken()\n                }\n            }).then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        } \n\n        /**\n         * Retorna un post\n         *\n         */\n        this.one = function(id) {\n            return $http.get(API_SERVER + \"/post/\" + id).then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        }              \n\n        /**\n         * Crear un post nuevo.\n         *\n         */\n        this.nuevoPost = function(post) {\n            return $http.post(API_SERVER + \"/post\", post, {\n                headers: { \n                    'x-token': Auth.getToken()\n                }\n            }).then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n\n        /**\n         * Editar un post.\n         *\n         */\n        this.editarPost = function(id,post) {\n            return $http.put(API_SERVER + \"/post/\" + id, post, {\n                headers: { \n                    'x-token': Auth.getToken()\n                }\n            }).then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n\n        /**\n         * Eliminar un post.\n         *\n         */\n        this.eliminarPost = function(id,post) {\n            return $http.delete(API_SERVER + \"/post/\" + id, {\n                headers: { \n                    'x-token': Auth.getToken()\n                }\n            }).then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n\n        /**\n         * Traer posts del usuario\n         *\n         */\n        this.userPosts = function() {\n            return $http.get(API_SERVER + \"/postsPerfil\").then(\n                function(rta){\n                    let response = rta.data;\n                    if(response.status == 0) {\n                        return {\n                            data: { message: response.message },\n                            success: true\n                        };\n                    } else {\n                        return {\n                            success: false,\n                            status: response.status,\n                            error: response.message\n                        };\n                    }\n                }\n            );\n        };\n    }\n]);","angular.module('brdr.services')\n\t.factory('Response', [\n\t\t'$ionicPopup',\n\t\t'$state',\n\t\tfunction($ionicPopup,$state) {\n\t\t\treturn {\n\t\t\t\t/**\n\t\t\t\t * Arma la respuesta de error\n\t\t\t\t *\n\t\t\t\t * @param {array} data\n\t\t\t\t * @param {*} value\n\t\t\t\t */\n\t\t\t\terror: function(data) {\n\n\t\t\t\t\tswitch(data.status){\n\n\t\t\t\t\t\tcase -1:\n\t\t\t\t\t\t\t$ionicPopup.alert({\n\t\t\t\t\t\t\t\ttemplate: data.error,\n\t\t\t\t\t\t\t\ttitle: 'Error',\n\t\t\t\t\t\t\t\tokText: 'Aceptar'\n\t\t\t\t\t\t\t});\n                            break;\n\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t$state.go('login');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t$.each(data.error,function(i,e){\n                              var name = i;\n                              $('*[name=\"'+i+'\"]').addClass('error');\n                              $.each(e,function(i,e){\n                                $('*[name=\"'+name+'\"]').after('<span class=\"error\">'+e+'</span>');\n                              });\n                            });\n                            break;\n\t\t\t\t\t}\n\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t]);","angular.module('brdr.services')\n.factory('Storage', function() {\n\treturn {\n\t\t/**\n\t\t * Agrega un item al Storage.\n\t\t *\n\t\t * @param {string} key\n\t\t * @param {*} value\n\t\t */\n\t\tset: function(key, value) {\n\t\t\tlocalStorage.setItem(key, JSON.stringify(value));\n\t\t},\n\t\t/**\n\t\t * Obtiene un valor del Storage.\n\t\t *\n\t\t * @param {string} key\n\t\t * @return {*}\n\t\t */\n\t\tget: function(key) {\n\t\t\treturn JSON.parse(localStorage.getItem(key));\n\t\t},\n\t\t/**\n\t\t * Verifica si tiene la key en el Storage.\n\t\t *\n\t\t * @param {string} key\n\t\t * @return {boolean}\n\t\t */ \n\t\thas: function(key) {\n\t\t\treturn localStorage.getItem(key) !== null;\n\t\t},\n\t\t/**\n\t\t * Elimina un item del Storage.\n\t\t *\n\t\t * @param {string} key\n\t\t */\n\t\tremove: function(key) {\n\t\t\tlocalStorage.removeItem(key);\n\t\t}\n\t}\n});"]}